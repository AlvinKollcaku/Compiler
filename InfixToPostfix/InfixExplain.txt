The infix to postfix converter uses the stack data structure
The stack will hold the operators and the ( which will be appended to postfix in the end
The digits of infix are directly put in postfix

1)A $ is appended in the end of infix array
2) A '(' is pushed onto the stack
3)While stack is not empty, read infix from left to right and do the following:
    If infix's current char is a digit, copy it to the next element of postfix
    If infix's current char is a '(', push it onto the stack
    If infix's current char is an operator,
        Pop operators (If any) at the top of the stack while they have equal or higher precedence
        than the current operator and insert the popped operators in postfix
        Push the current char in infix onto the stack
    If infix's current char is a ')'
        Pop operators from top of the stack and insert them in postfix until '(' is encounterd
        Pop the '(' too


Evaluation
It is done with another stack
Digits are pushed onto the stack until an operator is encountered in the postfix expression
There the last 2 pushed digits are popped and calculated with the operator-> the result
is pushed back into the stack

